<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\pawan\Google Drive\MAD_ORL\August - December 2013\IIIT Gwalior Project\TEST\TX\TX_TEST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\pawan\Google Drive\MAD_ORL\August - December 2013\IIIT Gwalior Project\TEST\TX\TX_TEST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Fri Nov 08 10:49:50 2013
<BR><P>
<H3>Maximum Stack Usage =         64 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; lcd_num
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1bdf568]">Reset_Handler</a>
 <LI><a href="#[1bdf5a4]">__user_initial_stackheap</a>
 <LI><a href="#[1bdf7c0]">Undef_Handler</a>
 <LI><a href="#[1bdf784]">SWI_Handler</a>
 <LI><a href="#[1bdf748]">PAbt_Handler</a>
 <LI><a href="#[1bdf70c]">DAbt_Handler</a>
 <LI><a href="#[1bdf6d0]">IRQ_Handler</a>
 <LI><a href="#[1bdf694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1bdf7c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bdf7c0]">Undef_Handler</a><BR>
 <LI><a href="#[1bdf784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bdf784]">SWI_Handler</a><BR>
 <LI><a href="#[1bdf748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bdf748]">PAbt_Handler</a><BR>
 <LI><a href="#[1bdf70c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bdf70c]">DAbt_Handler</a><BR>
 <LI><a href="#[1bdf6d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bdf6d0]">IRQ_Handler</a><BR>
 <LI><a href="#[1bdf694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bdf694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1bdf568]">Reset_Handler</a>
 <LI><a href="#[1bdf7c0]">Undef_Handler</a>
 <LI><a href="#[1bdf784]">SWI_Handler</a>
 <LI><a href="#[1bdf748]">PAbt_Handler</a>
 <LI><a href="#[1bdf70c]">DAbt_Handler</a>
 <LI><a href="#[1bdf6d0]">IRQ_Handler</a>
 <LI><a href="#[1bdf694]">FIQ_Handler</a>
 <LI><a href="#[1bdd7a4]">__main</a>
 <LI><a href="#[1bde668]">main</a>
 <LI><a href="#[1bd8fec]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1bdf568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1bdd7a4]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1bd6ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1bdd678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1bd6ae4]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1bdd7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1bd6aa8]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bdd678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1bd6a6c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1bd68c8]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd68c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd68c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1bd67d8]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1bdc28c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd9d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdcfac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[1bda3d8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1bda450]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[1bda810]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1bda6a8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1bda2e8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1bda360]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1bda720]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1bda630]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1bdac0c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1bdaa68]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[1bda9f0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1bda978]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1bda900]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1bda888]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1bdab1c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1bda2ac]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[1bda798]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1bda5b8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1bdab94]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1bd83bc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1bd99c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[1bd7084]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1bd6ea4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1bd6e68]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1bd6fd0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1bd7138]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1bd6f58]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1bdd678]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1bd6aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1bdd7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1bdd060]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1bdccdc]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bdca84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bdcfac]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bdc28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[1bdcfe8]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1bdcef8]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1bdc91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[1bdcf34]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1bdbb0c]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1bdc91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[1bd99c4]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1bd83bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[1bd9a00]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1bd9988]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1bd9be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1bdf5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bdca84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bdeb90]"></a>delay</STRONG> (ARM, 44 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bde6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_stop
<LI><a href="#[1bde6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_init
<LI><a href="#[1bdf0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
</UL>

<P><STRONG><a name="[1bdeb54]"></a>main_delay</STRONG> (ARM, 48 bytes, Stack size 0 bytes, tx_test.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bde974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_enter
</UL>

<P><STRONG><a name="[1bdeb18]"></a>lcd_cmd</STRONG> (ARM, 172 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bdea64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[1bdeadc]"></a>lcd_data</STRONG> (ARM, 172 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bdea28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_num
<LI><a href="#[1bdeaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_string
</UL>

<P><STRONG><a name="[1bdeaa0]"></a>lcd_string</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1bdeadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bdea64]"></a>lcd_init</STRONG> (ARM, 480 bytes, Stack size 8 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bdeb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bdea28]"></a>lcd_num</STRONG> (ARM, 120 bytes, Stack size 56 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lcd_num
</UL>
<BR>[Calls]<UL><LI><a href="#[1bde1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1bdeadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bde9ec]"></a>uart1_init</STRONG> (ARM, 44 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bde9b0]"></a>uart1_data</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bde8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_string
<LI><a href="#[1bde974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_enter
</UL>

<P><STRONG><a name="[1bde974]"></a>uart1_enter</STRONG> (ARM, 36 bytes, Stack size 4 bytes, tx_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bde9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_data
<LI><a href="#[1bdeb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_delay
</UL>

<P><STRONG><a name="[1bde938]"></a>uart1_rx</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tx_test.o(.text), UNUSED)

<P><STRONG><a name="[1bde8fc]"></a>uart1_string</STRONG> (ARM, 40 bytes, Stack size 4 bytes, tx_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bde9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_data
</UL>

<P><STRONG><a name="[1bde8c0]"></a>uart0_init</STRONG> (ARM, 44 bytes, Stack size 0 bytes, tx_test.o(.text), UNUSED)

<P><STRONG><a name="[1bde884]"></a>uart0_data</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tx_test.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bde80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_string
</UL>

<P><STRONG><a name="[1bde848]"></a>uart0_rx</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tx_test.o(.text), UNUSED)

<P><STRONG><a name="[1bde80c]"></a>uart0_string</STRONG> (ARM, 40 bytes, Stack size 4 bytes, tx_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bde884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_data
</UL>

<P><STRONG><a name="[1bde7d0]"></a>i2c_delay</STRONG> (ARM, 44 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_init
<LI><a href="#[1bdf0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
</UL>

<P><STRONG><a name="[1bde794]"></a>i2c_lpc_init</STRONG> (ARM, 104 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_init
</UL>

<P><STRONG><a name="[1bde758]"></a>read_eeprom</STRONG> (ARM, 104 bytes, Stack size 16 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_eeprom
</UL>
<BR>[Calls]<UL><LI><a href="#[1bdf130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[1bdf16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
<LI><a href="#[1bdf1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bde71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_start
</UL>

<P><STRONG><a name="[1bde71c]"></a>mems_start</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mems_start &rArr; read_eeprom
</UL>
<BR>[Calls]<UL><LI><a href="#[1bde758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bde6e0]"></a>mems_init</STRONG> (ARM, 96 bytes, Stack size 8 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mems_init &rArr; write_eeprom
</UL>
<BR>[Calls]<UL><LI><a href="#[1bde794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_init
<LI><a href="#[1bde7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[1bdeb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1bdf0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bde6a4]"></a>mems_stop</STRONG> (ARM, 52 bytes, Stack size 8 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mems_stop &rArr; write_eeprom
</UL>
<BR>[Calls]<UL><LI><a href="#[1bdeb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1bdf0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[1bde668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bde668]"></a>main</STRONG> (ARM, 608 bytes, Stack size 8 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = main &rArr; lcd_num
</UL>
<BR>[Calls]<UL><LI><a href="#[1bde6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_stop
<LI><a href="#[1bde6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_init
<LI><a href="#[1bde71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_start
<LI><a href="#[1bde9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_data
<LI><a href="#[1bde9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[1bdea28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_num
<LI><a href="#[1bdea64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1bdeaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_string
<LI><a href="#[1bdeadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data
<LI><a href="#[1bdeb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cmd
<LI><a href="#[1bdeb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[1bde26c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[1bde230]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[1bdd90c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1bdd8d0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1bdd894]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1bdca84]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bdbbfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[1bdf5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdccdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1bdc91c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1bdbb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[1bdc8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdcef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1bdbc38]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1bdbbfc]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bdca84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bdbbc0]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1bd9be0]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd9988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1bd96b8]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd9d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1bd8fec]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[1bd8fb0]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1bde1f4]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[1bde1b8]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1bde2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[1bde2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[1bde320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdea28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_num
</UL>

<P><STRONG><a name="[1bd9d48]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd96b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdc28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[1bd9d0c]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1bdf7c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1bdf7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdf7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1bdf784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1bdf784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdf784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1bdf748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1bdf748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdf748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1bdf70c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1bdf70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdf70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1bdf6d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1bdf6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdf6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1bdf694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1bdf694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bdf694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1bdf1a8]"></a>i2c_lpc_ctrl</STRONG> (ARM, 96 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
<LI><a href="#[1bdf0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
</UL>

<P><STRONG><a name="[1bdf16c]"></a>i2c_lpc_wr_byte</STRONG> (ARM, 40 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
<LI><a href="#[1bdf0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
</UL>

<P><STRONG><a name="[1bdf130]"></a>i2c_lpc_stop</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tx_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
<LI><a href="#[1bdf0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
</UL>

<P><STRONG><a name="[1bdf0f4]"></a>write_eeprom</STRONG> (ARM, 76 bytes, Stack size 16 bytes, tx_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_eeprom
</UL>
<BR>[Calls]<UL><LI><a href="#[1bde7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[1bdeb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1bdf130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[1bdf16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
<LI><a href="#[1bdf1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bde6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_stop
<LI><a href="#[1bde6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems_init
</UL>

<P><STRONG><a name="[1bde320]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1bde2e4]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1bde2a8]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bde1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1bdc8a4]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1bdc91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
